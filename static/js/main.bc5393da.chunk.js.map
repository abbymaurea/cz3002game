{"version":3,"sources":["button_press.mp3","Cell.js","Board.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Cell","props","handleClick","bind","evt","Audio","ButtonPress","play","this","flipCellsAroundMe","classes","isLit","className","onClick","Component","Board","state","allCellsOff","board","createBoard","y","nrows","row","x","ncols","push","Math","random","probCellLit","coord","split","map","Number","flipCell","every","cell","setState","alert","tblBoard","key","flipCellsAround","defaultProps","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iGAAAA,EAAOC,QAAU,IAA0B,0C,gQCgC5BC,E,kDA1Bb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,YAAc,EAAKA,YAAYC,KAAjB,gBAFF,E,wDAKPC,GAGE,IAAIC,MAAMC,KAEhBC,OAENC,KAAKP,MAAMQ,sB,+BAKX,IAAIC,EAAU,QAAUF,KAAKP,MAAMU,MAAQ,YAAc,IAEzD,OACI,wBAAIC,UAAWF,EAASG,QAASL,KAAKN,kB,GArB3BY,aCAbC,G,wDAQJ,WAAYd,GAAQ,IAAD,8BACjB,cAAMA,IAEDe,MAAQ,CACXC,aAAa,EACbC,MAAO,EAAKC,eALG,E,0DAcjB,IAHA,IAAID,EAAQ,GAGJE,EAAE,EAAGA,EAAEZ,KAAKP,MAAMoB,MAAOD,IAAI,CAEnC,IADA,IAAIE,EAAM,GACFC,EAAI,EAAGA,EAAIf,KAAKP,MAAMuB,MAAOD,IACnCD,EAAIG,KAAKC,KAAKC,SAAWnB,KAAKP,MAAM2B,aAEtCV,EAAMO,KAAKH,GAGb,OAAOJ,I,sCAIOW,GAAO,MAGArB,KAAKP,MAArBuB,EAHgB,EAGhBA,MAAOH,EAHS,EAGTA,MACRH,EAAQV,KAAKQ,MAAME,MAJF,EAKRW,EAAMC,MAAM,KAAKC,IAAIC,QALb,mBAKhBZ,EALgB,KAKbG,EALa,KAQrB,SAASU,EAASb,EAAGG,GAGfA,GAAK,GAAKA,EAAIC,GAASJ,GAAK,GAAKA,EAAIC,IACvCH,EAAME,GAAGG,IAAML,EAAME,GAAGG,IAK5BU,EAASb,EAAEG,GACXU,EAASb,EAAEG,EAAE,GACbU,EAASb,EAAEG,EAAE,GACbU,EAASb,EAAE,EAAEG,GACbU,EAASb,EAAE,EAAEG,GAGb,IAAIN,EAAcC,EAAMgB,OAAM,SAAAZ,GAAG,OAAEA,EAAIY,OAAM,SAAAC,GAAI,OAAGA,QAEpD3B,KAAK4B,SAAS,CAAElB,MAAOA,EAAOD,YAAaA,M,+BASnC,IAAD,OAIP,GAAGT,KAAKQ,MAAMC,YACZ,OAAOoB,MAAM,2BAMf,IAFA,IAAIC,EAAW,GAEPlB,EAAI,EAAGA,EAAIZ,KAAKP,MAAMoB,MAAOD,IAAI,CAEvC,IADA,IAAIE,EAAM,GAD6B,WAE/BC,GACN,IAAIM,EAAM,GAAD,OAAKT,EAAL,YAAUG,GACnBD,EAAIG,KACJ,kBAAC,EAAD,CAAMc,IAAKV,EAAOlB,MAAO,EAAKK,MAAME,MAAME,GAAGG,GAC7Cd,kBAAmB,kBAAM,EAAK+B,gBAAgBX,QAJxCN,EAAI,EAAGA,EAAIf,KAAKP,MAAMuB,MAAOD,IAAK,EAAlCA,GASVe,EAASb,KAAK,wBAAIc,IAAKnB,GAAIE,IAG3B,OAEJ,6BAEA,yBAAKV,UAAU,UACf,yBAAKA,UAAU,eAAf,0BACA,yBAAKA,UAAU,yBAAf,4CAEM,2BAAOA,UAAU,SACf,+BAEC0B,S,GAzGWxB,cAAdC,EAEG0B,aAAe,CACpBpB,MAAQ,EACRG,MAAQ,EACRI,YAAa,KAqHFb,QC/GA2B,G,6KATX,OACE,yBAAK9B,UAAU,OACb,kBAAC,EAAD,W,GAJUE,cCOE6B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDuH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.bc5393da.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/button_press.e3789c2b.mp3\";","import React, {Component} from 'react'\nimport \"./Cell.css\"\nimport ButtonPress from \"./button_press.mp3\"\n\n\nclass Cell extends Component {\n  constructor(props) {\n    super(props);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick(evt) {\n    // call up to the board to flip cells around this cell\n\n    let audio = new Audio(ButtonPress);\n    //play the audio everytime the cell was clicked\n    audio.play();\n    // call flipcellsaroundme to flip the cells.\n    this.props.flipCellsAroundMe();\n  }\n\n  render() {\n    //ternary operation for the cell : it's either lit up or not.\n    let classes = \"Cell\" + (this.props.isLit ? \" Cell-lit\" : \"\");\n\n    return (\n        <td className={classes} onClick={this.handleClick} />\n    )\n  }\n}\n\n\nexport default Cell","import React, {Component} from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n\n\nclass Board extends Component {\n\n  static defaultProps = {\n    nrows : 5,\n    ncols : 5,\n    probCellLit: 0.25\n  }\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      allCellsOff: false,\n      board: this.createBoard()\n    }\n  }\n\n\n  createBoard() {\n    let board = [];\n   \n    //create the rows and columns in the board.\n    for(let y=0; y<this.props.nrows; y++){\n      let row = [];\n      for(let x = 0; x < this.props.ncols; x++){\n        row.push(Math.random() < this.props.probCellLit) // gives you a value between zero and 1 and check if its lower than the probability 0.25\n      }\n      board.push(row);\n    }\n\n    return board\n  }\n\n//flips the cells and check if all the cells are not lit to check if they win\n  flipCellsAround(coord) {\n    //check if it flips\n   // console.log('flipping!', coord);\n    let {ncols, nrows} = this.props;\n    let board = this.state.board;\n    let [y, x] = coord.split(\"-\").map(Number);\n\n\n    function flipCell(y, x) {\n      // if this coord is actually on board valid, flip it\n        \n      if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n        board[y][x] = !board[y][x];\n      }\n    }\n\n    //since the game flips the adjacent cells\n    flipCell(y,x)\n    flipCell(y,x-1);\n    flipCell(y,x+1);\n    flipCell(y-1,x)\n    flipCell(y+1,x)\n\n\n    let allCellsOff = board.every(row=>row.every(cell=>!cell));\n\n    this.setState({ board: board, allCellsOff: allCellsOff})\n    \n\n   \n  }\n\n\n  /** Render game board or winning message. */\n\n  render() {\n\n    \n\n    if(this.state.allCellsOff){\n      return alert(\"You turned it all off!!\");\n    }\n\n\n    let tblBoard = [];\n\n    for(let y = 0; y < this.props.nrows; y++){\n      let row = [];\n      for(let x = 0; x < this.props.ncols; x++){\n        let coord= `${y}-${x}`;\n        row.push(\n        <Cell key={coord} isLit={this.state.board[y][x]}\n        flipCellsAroundMe={() => this.flipCellsAround(coord)}\n        \n        />);\n      }\n\n    tblBoard.push(<tr key={y}>{row}</tr>);\n    }\n\n    return(\n\n<div>\n\n<div className=\"header\">\n<div className=\"board-title\">MindSpace's Lights Out</div>\n<div className=\"board-title-subheader\">turn all the blue tiles into grey tiles</div>\n</div>\n      <table className=\"Board\">\n        <tbody>\n\n        {tblBoard}\n\n        </tbody>\n\n\n\n\n      </table>\n\n      </div>\n    );\n   \n\n  }\n}\n\n\nexport default Board;\n","import React, { Component } from \"react\";\nimport Board from \"./Board\";\nimport \"./App.css\";\n\n\nclass App extends Component {\n  render() {\n    return (\n      <div className='App'>\n        <Board />\n      </div>\n    );\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}